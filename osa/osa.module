<?php

/**
 * @file
 * Drupal Module for The Oakville Suzuki Association
 * - customizes several CiviCRM pages and forms
 */
require_once 'osa.inc';

/**
 * This hook is called before a CiviCRM page is rendered and invokes the appropriate customization function.
 *
 * @param $page
 *   The page being rendered.
 */
function osa_civicrm_pageRun(&$page) {
  $name = $page->getVar('_name');

  if (function_exists("osa_civicrm_page_$name")) {
    call_user_func("osa_civicrm_page_$name", $page);
  }
}

/**
 * Override what is on the Contact Dashboard to make a 'Family Profile' page
 *
 * @param object $page
 *   The CRM_Contact_Page_View_UserDashBoard object being rendered.
 */
function osa_civicrm_page_CRM_Contact_Page_View_UserDashBoard(&$page) {
  require_once 'api/api.php';

  // get current user's contact id
  $uid = _osa_getContactId();
  
  // reset the session if it got corrupted (opening civicrm forms with different ids)
  if ($uid != $page->_contactId) {
    $session = CRM_Core_Session::singleton();
    $session->reset();
    $session->set('userID', $uid);
  }
  
  // use the contact id passed in the URL, or the household of the current user
  $cid = CRM_Utils_Request::retrieve('id', 'Positive');
  if (isset($cid)) {
    $hid =_osa_getHousehold($cid);
  }
  else {
    $cid = $uid;
    $hid =_osa_getHousehold($cid);
    if (isset($hid)) {
      $cid = $hid;
    }
    else {
      CRM_Utils_System::setUFMessage(
        ts('You do not have a Family Profile. Click <b>') .
        CRM_Utils_System::href( ts('here'), 'civicrm/profile/create', 'reset=1&gid=' . OSA_PROFILE_FAMILY) .
        ts('</b> if you would like to create one.') . 
        ts('<br>Note you must create a Family Profile to register people other than yourself for Membership or Events')
      );
    }
  }

  // take the opportunity to clean house
  if (isset($hid)) {
    _osa_manageHouseholdRelationships($hid);
  }
  
  // $cid could be:
  //   the contact id passed in the URL,
  //   the household of the current user,
  //   or the current user
  // so the get the contact object being displayed
  $pgContact = _osa_getContact($cid, FALSE);
  $pgContactType = isset($pgContact['contact_sub_type']) ? $pgContact['contact_sub_type'][0] : $pgContact['contact_type'];
  // @todo image_URL not currently returned by api
  $pgContact['image_URL'] = CRM_Contact_BAO_Contact_Utils::getImage($pgContactType, FALSE, $cid);
  $page->assign('contact', $pgContact);

  // init vars & arrays
  $parents         = array();
  $students        = array();
  $teachers        = array();
  $others          = array();
  $smarty          = $page->getTemplate();
  $members         = array(); // overwrite list to display name
  $event_rows      = $smarty->get_template_vars('event_rows');
  $contribute_rows = $smarty->get_template_vars('contribute_rows');
  $groupIn         = $smarty->get_template_vars('groupIn');

  // get all the family members for this contact
  $family = _osa_getHouseholdMembers($cid);

  foreach ($family as $person) {

    // get membership status
    $membership = _osa_get_membership($person['contact_id']);
    if (isset($membership)) {
      $person['contact']['is_current_member'] = $membership['is_current_member'];
      $person['membership']['status'] = $membership['status'];
      $membership['display_name'] = $person['contact']['display_name'];
      $members[] = $membership;
    }

    // separate people by type to display in separate lists
    $contact_type = $person['contact_type'];
    if ($contact_type == 'Parent') {
      $parents[] = $person;
    }
    elseif ($contact_type == 'Student') {
      $students[] = $person;
    }
    elseif ($contact_type == 'Teacher') {
      $teachers[] = $person;
    }
    elseif ($contact_type == 'Household') {
      // do nothing
    }
    else {
      $others[] = $person;
    }

    // append family member elements to lists in the page
    if ($person['contact_id'] != $page->_contactId) {
      $events = _osa_get_participant_events($person['contact_id']);
      if (isset($events)) {
        $event_rows = $event_rows + $events;
      }

      $contributions = _osa_get_contributions($person['contact_id']);
      if (isset($contributions)) {
        $contribute_rows = $contribute_rows + $contributions;
      }
    }
  }

  // (re)assign Smarty varibles
  $page->assign('parents', $parents);
  $page->assign('students', $students);
  $page->assign('teachers', $teachers);
  $page->assign('others', $others);
  $page->assign('members', $members);
  $page->assign('event_rows', $event_rows);
  $page->assign('contribute_rows', $contribute_rows);
  $page->assign('groupIn', $groupIn);
  
  // use the CiviCRM Profiles to display tombstone info
  require_once 'CRM/Profile/Page/Dynamic.php';
  $gids = array('Phone and Email' => OSA_PROFILE_PHONE_EMAIL, 'Address' => OSA_PROFILE_ADDRESS);
  $profileElements = array();
  foreach ($gids as $title => $gid) {
    $profile = new CRM_Profile_Page_Dynamic($cid, $gid, 'Profile');
    $profileElements[] =
      array(
        'cid'   => $cid,
        'gid'   => $gid,
        'title' => $title,
        'html'  => $profile->run(),
    );
  }
  $page->assign('profileElements', $profileElements);

  // override the templates used for each dashboard element
  $dashboardElements = array();
  if (isset($hid)) {
    $dashboardElements[] = array(
      'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Family.tpl',
      'sectionTitle' => 'Family Members',
      'sectionState' => 'open'
    );
    $dashboardElements[] = array(
      'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Relationship.tpl',
      'sectionTitle' => 'Other Related Individual(s)',
      'sectionState' => empty($others) ? 'closed' : 'open',
    );
  }

  $dashboardElements[] = array(
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Membership.tpl',
    'sectionTitle' => 'Membership Registration(s)',
    'sectionState' => empty($members) ? 'closed' : 'open',
  );
  $dashboardElements[] = array(
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Teacher.tpl',
    'sectionTitle' => 'Teacher Registration(s)',
    'sectionState' => empty($teachers) ? 'closed' : 'open',
  );
  $dashboardElements[] = array(
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Event.tpl',
    'sectionTitle' => 'Event Registration(s)',
    'sectionState' => empty($event_rows) ? 'closed' : 'open',
  );
  $dashboardElements[] = array(
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Contribute.tpl',
    'sectionTitle' => 'Recent Payment(s)',
    'sectionState' => empty($contribute_rows) ? 'closed' : 'open',
  );
  $dashboardElements[] = array(
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Group.tpl',
    'sectionTitle' => 'Mailing List(s)',
    'sectionState' => empty($groupIn) ? 'closed' : 'open',
  );
  $page->assign('dashboardElements', $dashboardElements);

  // override the page title (do this last as generating profiles also ovrides the title)
  CRM_Utils_System::setTitle($pgContact['display_name'], $pgContact['image_URL'] . ' ' . $pgContact['display_name']);
}

/**
 * Implements hook_civicrm_buildForm to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   Reference to the form object.
 */
function osa_civicrm_buildForm($formName, &$form) {
  if (function_exists("osa_civicrm_buildForm_$formName")) {
    call_user_func("osa_civicrm_buildForm_$formName", $form);
  }
}

/**
 * Implements hook_civicrm_postProcess to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_postProcess($formName, &$form) {
  if (function_exists("osa_civicrm_postProcess_$formName")) {
    call_user_func("osa_civicrm_postProcess_$formName", $form);
  }
}

/**
 * Add custom procesing when generating CiviCRM Profile based forms
 *
 * @param $form
 *   The CRM_Profile_Form_Edit object being rendered.
 */
function osa_civicrm_buildForm_CRM_Profile_Form_Edit(&$form) {
  
  $gid = $form->getVar('_gid');
  $mode = $form->getVar('_mode');
  
  // if we are passed a household id add it to the form
  $hid = CRM_Utils_Request::retrieve('osa_hid', 'Positive');
  if (isset($hid)) {
    _osa_addField($form, 'hidden', 'osa_hid', $hid);
  }
  
  // set defaults in the create family profile form
  if ($gid == OSA_PROFILE_FAMILY) {
    if ($mode == CRM_Profile_Form::MODE_CREATE) {
      $contact = _osa_getContact();
      $defaults = array(
        'household_name' => $contact['last_name'] . ' Family',
        'email-Primary' => $contact['email'],
      );
      if (isset($contact['phone'])) {
        $defaults['phone-Primary-1'] = $contact['phone'];
      }
      if (isset($contact['street_address'])) {
        $defaults['street_address-1'] = $contact['street_address'];
      }
      if (isset($contact['city'])) {
        $defaults['city-1'] = $contact['city'];
      }
      if (isset($contact['state_province_id'])) {
        $defaults['state_province-1'] = $contact['state_province_id'];
      }
      if (isset($contact['country_id'])) {
        $defaults['country-1'] = $contact['country_id'];
      }
      if (isset($contact['postal_code'])) {
        $defaults['postal_code-1'] = $contact['postal_code'];
      }
      $form->setDefaults($defaults);
    }
  }
  // add a relationship type selection to the Related Individual profile form
  elseif ($gid == OSA_PROFILE_REL_INDIVIDUAL) {
    if ($mode == CRM_Profile_Form::MODE_CREATE) {
      _osa_addRelationshipField($form, $hid);
    }
  }

  // add CSS and javascript to profile forms in a colorbox
  $context = CRM_Utils_Request::retrieve('context', 'String');
  if ($context == 'boxload') {
    $smarty = CRM_Core_Smarty::singleton();
    $smarty->display('CRM/common/jquery.tpl');
    $smarty->display('CRM/common/commonCSS.tpl');
    $smarty->display('osa/boxload.tpl');
  }
}

/**
 * Add custom post procesing to CiviCRM Profile based forms
 *
 * @param $form
 *   The CRM_Profile_Form_Edit object being processed.
 */
function osa_civicrm_postProcess_CRM_Profile_Form_Edit(&$form) {

  $gid  = $form->getVar('_gid');
  $mode = $form->getVar('_mode');
  $cid  = $form->getVar('_id'); // contact created/updated by profile form
  $hid  = CRM_Utils_Array::value('osa_hid', $_POST);

  // if we just created a new contact, setup the relationships, etc.
  if ($mode == CRM_Profile_Form::MODE_CREATE) {

    // if we are passed a household id, add the new contact to the house
    if (isset($hid)) {
      $type = OSA_REL_HOUSEHOLD_MEMBER;
      if ($gid == OSA_PROFILE_REL_INDIVIDUAL) {
        $type = _osa_getRelationshipField($form);
      }

      $contact     = _osa_getContact($cid, FALSE);
      $contact_type = isset($contact['contact_sub_type']) ? $contact['contact_sub_type'][0] : $contact['contact_type'];
      $perm        = ($contact_type == 'Parent') ? OSA_PERM_OWNED : OSA_PERM_NONE;
      _osa_create_relationship($type, $cid, $hid, $perm);

      // set up all of the other relationships
      _osa_manageHouseholdRelationships($hid);
    }

    // if we just created the household itself, set current user to be the head
    if ($gid == OSA_PROFILE_FAMILY) {
      $hid = $cid;
      $cid = _osa_getContactId();
      _osa_create_relationship(OSA_REL_HEAD_HOUSEHOLD, $cid, $hid, OSA_PERM_OWNED);
      
      // update the current contact to be a Parent
      $result = civicrm_api('contact', 'create', array('id' => $cid, 'contact_sub_type' => 'Parent', 'version' => 3));
    }
    
    // set the family member's address to share the household address
    if ((isset($hid)) && ($gid != OSA_PROFILE_REL_INDIVIDUAL)) {
      $result = civicrm_api('address', 'get', array('contact_id' => $hid, 'location_type_id' => 1, 'version' => 3));
      if ($result['count'] > 0) {
        $houseAddressId = $result['id'];
        $sharedAddress = $result['values'][$houseAddressId];
        $sharedAddress['master_id'] = $houseAddressId;
        $sharedAddress['use_shared_address'] = TRUE;
        $sharedAddress['contact_id'] = $cid;
        $sharedAddress['version'] = 3;

        $result = civicrm_api('address', 'get', array('contact_id' => $cid, 'location_type_id' => 1, 'version' => 3));
        if ($result['count'] > 0) {
          $result = civicrm_api('address', 'delete', array('id' => $result['id'], 'version' => 3));
        }

        unset($sharedAddress['id']);
        $result = civicrm_api('address', 'create', $sharedAddress);
      }
    }
  }
}

/**
 * Add custom procesing when generating CiviCRM Contribution based forms
 *
 * @param $form
 *   The CRM_Contribute_Form_Contribution_Main object being rendered.
 */
function osa_civicrm_buildForm_CRM_Contribute_Form_Contribution_Main(&$form) {

  // all of our contributions are from authnticated users,
  // so remove the email for anonymous users
  $bltID = $form->_bltID;
  $form->removeElement("email-$bltID");
  
  // check if this is the membership form (we only use one for memberships)
  if ($form->_id == OSA_CONTRIB_MEMBER) {
    return;
  }
  // all other contributions can be made on behalf of a family member
  // so add a drop down of family members
  $family = _osa_getHouseholdMembers(NULL, 'display_name');
  asort($family);
  $form->addElement('select', 'contact_id', ts('Family Member'), $family);
  $form->addRule('contact_id', ts('Please select a family member.'), 'required');
  $session = CRM_Core_Session::singleton();
  $form->setDefaults(array('contact_id' => $session->get('userID')));
  $form->assign('onbehalfFamily', TRUE);
}

/**
 * Add custom post procesing to CiviCRM Contribution based forms
 *
 * @param $form
 *   The CRM_Contribute_Form_Contribution_Main object being processed.
 */
function osa_civicrm_postProcess_CRM_Contribute_Form_Contribution_Main(&$form) {

  // since we use a Cart, we can disable the confirmation forms
  $confirmForm =& $form->controller->_pages['Confirm'];
  $confirmForm->preProcess();

  // Hack to tell form validator that confirmation page is valid
  $data     =& $form->controller->container();
  $data['valid']['Confirm'] = 1;

  // Redirect to thank you page
  $confirmForm->postProcess();
  $qfKey = $form->controller->_key;
  CRM_Utils_System::redirect(CRM_Utils_System::url('civicrm/contribute/transact', "_qf_ThankYou_display=1&qfKey=$qfKey", TRUE, NULL, FALSE));
}

/**
 * Add custom procesing when generating CiviCRM Event Registration forms
 *
 * @param $form
 *   The CRM_Event_Form_Registration_Register object being rendered.
 */
function osa_civicrm_buildForm_CRM_Event_Form_Registration_Register(&$form) {
  // remove the email field to identify participant
  $bltID = $form->_bltID;
  $form->removeElement("email-$bltID");
  
  // registrations can be made on behalf of a family member
  // so add a drop down of family members
  $family = _osa_getHouseholdMembers(NULL, 'display_name');
  asort($family);
  $form->addElement('select', 'contact_id', ts('Family Member'), $family);
  $form->addRule('contact_id', ts('Please select a family member.'), 'required');
  $session = CRM_Core_Session::singleton();
  $form->setDefaults(array('contact_id' => $session->get('userID')));
  $form->assign('onbehalfFamily', TRUE);
}

/**
 * Add custom post procesing to CiviCRM Event Registration forms
 *
 * @param $form
 *   The CRM_Event_Form_Registration_Register object being processed.
 */
function osa_civicrm_postProcess_CRM_Event_Form_Registration_Register(&$form) {

  // since we use a Cart, we want to disable the confirmation form
  $confirmForm =& $form->controller->_pages['Confirm'];

  // first set the contact id to the selected family member
  $data =& $form->controller->container();
  $contact_id = $data['values']['Register']['contact_id'];
  $params = $confirmForm->get('params');
  $params[0]['contact_id'] = $contact_id;
  $confirmForm->set('params', $params);;

  // build the confirmation form to make sure all of the values are set
  $confirmForm->preProcess();
  $confirmForm->buildQuickForm();

  // tell form validator that confirmation page is valid
  $data['valid']['Confirm'] = 1;
  $confirmForm->postProcess();

  // Redirect to thank you page
  $qfKey = $form->controller->_key;
  CRM_Utils_System::redirect(CRM_Utils_System::url('civicrm/event/register', "_qf_ThankYou_display=true&qfKey=$qfKey", TRUE, NULL, FALSE));
}

/**
 * Add custom procesing when generating CiviCRM Email forms
 *
 * @param $form
 *   The CRM_Contact_Form_Task_Email object being rendered.
 */
function osa_civicrm_buildForm_CRM_Contact_Form_Task_Email(&$form) {

  // if there are contact's we want to email but they don't have an email
  // address defined (i.e. Students), try to use their household's email
  $emailsNotSent = array_diff_assoc($form->_allContactDetails, $form->_contactDetails);
  if (empty($emailsNotSent)) {
    return;
  }
  $smarty = $form->getTemplate();
  $suppressedEmails = $smarty->get_template_vars('suppressedEmails');
  $toArray = json_decode($smarty->get_template_vars('toContact'), TRUE);

  foreach ($emailsNotSent as $contactId => $value) {
    if ($value['do_not_email'] || CRM_Utils_Array::value('is_deceased', $value) || CRM_Utils_Array::value('on_hold', $value)) {
      continue;
    }

    // find the household
    $hid = _osa_getHousehold($contactId);
    if (isset($hid)) {
      $h_contact = _osa_getContact($hid, FALSE);
      if (isset($h_contact['email'])) {
        $email = $h_contact['email'];
        $toArray[] = array(
          'name' => '"' . $value['sort_name'] . '" &lt;' . $email . '&gt;',
          'id'   => "$hid::{$email}",
        ); 
        $suppressedEmails--;
      }
    }
  }

  // quit now if there are no emails to add
  if (empty($toArray)) {
    return;
  }

  $form->assign('toContact', json_encode($toArray));
  $form->assign('suppressedEmails', $suppressedEmails);
}

/**
 * Add custom procesing when generating CiviCRM Email forms
 *
 * @param $form
 *   The CRM_Event_Form_Task_Email object being rendered.
 */
function osa_civicrm_buildForm_CRM_Event_Form_Task_Email(&$form) {
  osa_civicrm_buildForm_CRM_Contact_Form_Task_Email($form);
}

/**
 * Implements hook_form_alter() to modify forms generated by other drupal modules
 */
function osa_form_alter(&$form, &$form_state, $form_id) {

  // all this just to set the default payment type on Commerce Checkout
  if ($form_id == 'commerce_checkout_form_checkout') {
    if (!$form_state['rebuild']) {
      if ($form['commerce_payment']['payment_method']['#default_value'] != 'commerce_elavon|commerce_payment_commerce_elavon') {
        $form['commerce_payment']['payment_method']['#default_value'] = 'commerce_elavon|commerce_payment_commerce_elavon';
        $payment_method = commerce_payment_method_load('commerce_elavon');
        if ($callback = commerce_payment_method_callback($payment_method, 'submit_form')) {
          $form['commerce_payment']['payment_details'] = $callback($payment_method, array(), $form['commerce_payment'], $form_state['order']);
        }
        $form['commerce_payment']['payment_details']['#prefix'] = '<div id="payment-details">';
        $form['commerce_payment']['payment_details']['#suffix'] = '</div>';
      }
    }
    
    $form['buttons']['continue']['#value'] = t('Pay Now');
  }
}

/**
 * Implements hook_commerce_currency_info_alter() to not display the currency symbol (CAD)
 */
function osa_commerce_currency_info_alter(&$currencies, $langcode) {
  $currencies['CAD']['code_placement'] = 'hidden';
}

/**
 * Implements hook_commerce_elavon_transaction_alter() to add custom variables to the transaction
 */
function osa_commerce_elavon_transaction_alter( &$txn_array, $values, $order ) {
  $txn_array['osa_card_type'] = $values['type'];
  $txn_array['osa_name_card'] = $values['owner'];  
}
