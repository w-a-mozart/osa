<?php

/**
 * @file
 * Drupal Module for The Oakville Suzuki Association
 * - customizes several CiviCRM pages and forms
 */
require_once 'osa.inc';

/**
 * This hook is called before a CiviCRM page is rendered.
 * It then invokes the appropriate customization function.
 *
 * @param $page
 *   The page being rendered.
 *
 * @see http://wiki.civicrm.org/confluence/display/CRMDOC33/CiviCRM+hook+specification#CiviCRMhookspecification-hookcivicrmpageRun
 */
function osa_civicrm_pageRun(&$page)
{
  $name = $page->getVar('_name');

  if (function_exists("osa_civicrm_page_$name")) {
    call_user_func("osa_civicrm_page_$name", $page);
  }
}

/**
 * Override what is on the Contact Dashboard to make a 'Family Profile' page
 *
 * @param object $page
 *   The CRM_Contact_Page_View_UserDashBoard object being rendered.
 *
 */
function osa_civicrm_page_CRM_Contact_Page_View_UserDashBoard(&$page)
{
  require_once 'api/api.php';

  // get current user's contact id
  $uid = _osa_getContactId();
  // CRM_Core_Error::debug('User',  $user);
  
  // reset the session if it got corrupted (opening civicrm forms with different ids)
  if ($uid != $page->_contactId) {
    $session = CRM_Core_Session::singleton();
    $session->reset();
    $session->set('userID', $uid);
  }
  
  // Use the contact id passed in the URL, or the household of the current user
  $cid = CRM_Utils_Request::retrieve('id', 'Positive');
  if (isset($cid)) {
    $hid =_osa_getHousehold($cid);
  } else {
    $cid = $uid;
    $hid =_osa_getHousehold($cid);
    if (isset($hid)) {
      $cid = $hid;
    } else {
      CRM_Utils_System::setUFMessage(
        ts('You do not have a Family Profile. Click <b>') .
        CRM_Utils_System::href( ts('here'), 'civicrm/profile/create', 'reset=1&gid=' . OSA_PROFILE_FAMILY) .
        ts('</b> if you would like to create one.') . 
        ts('<br>Note you must create a Family Profile to register people other than yourself for Membership or Events')
      );
    }
  }

  // use the opportunity to clean house
  if (isset($hid)) {
    _osa_manageHouseholdRelationships($hid);
  }
  
  // $cid could be:
  //   the contact id passed in the URL,
  //   the household of the current user,
  //   or the current user
  // so the get the contact object being displayed
  $result = civicrm_api('contact', 'get', array('id' => $cid, 'version' => 3));
  $pgContact = $result['values'][$result['id']];
  $pgContactType = isset($pgContact['contact_sub_type']) ? $pgContact['contact_sub_type'][0] : $pgContact['contact_type'];
  // FIX: image_URL not currently returned by api
  $pgContact['image_URL'] = CRM_Contact_BAO_Contact_Utils::getImage($pgContactType, false, $cid);
  $page->assign('contact', $pgContact);

  // init vars & arrays
  $smarty = $page->getTemplate();
  $parents = array();
  $students = array();
  $teachers = array();
  $others = array();
  $members = array();
  // $homes = array(); not used
  
  // get all relationships for this contact
  $family = _osa_getHouseholdMembers($cid);

  // separate them by type to display in separate lists
  foreach($family as $person) {
    $contactType = $person['contact_type'];

    if ($contactType == 'Parent') {
      $parents[] = $person;
      
    } elseif ($contactType == 'Student') {
      $membership = _osa_get_membership($person['contact_id']);
      if (isset($membership)) {
        $person['contact']['is_current_member'] = $membership['is_current_member'];
        $membership['display_name'] = $person['contact']['display_name'];
        $members[] = $membership;
      }
      $students[] = $person;

    } elseif ($contactType == 'Teacher') {
      $teachers[] = $person;

    } elseif ($contactType == 'Household') {
      // $homes[] = $person;

    } else {
      $others[] = $person;
    }

    // add contact contributions to the already created list
    if ($person['contact_id'] != $page->_contactId) {
      $contributions = _osa_get_contributions($person['contact_id']);
      _osa_appendTemplateVar($smarty, 'contribute_rows', $contributions);
    }
  }

  // assign Smarty varibles
  $page->assign('parents', $parents);
  $page->assign('students', $students);
  $page->assign('teachers', $teachers);
  $page->assign('others', $others);
  $page->assign('members', $members);
  // $page->assign('homes', $homes);
  
  // use the CiviCRM Profiles to display tombstone info
  require_once 'CRM/Profile/Page/Dynamic.php';
  $gids = array('Phone and Email' => OSA_PROFILE_PHONE_EMAIL, 'Address' => OSA_PROFILE_ADDRESS);
  $profileElements = array();
  foreach($gids as $title => $gid) {
    $profile = new CRM_Profile_Page_Dynamic($cid, $gid, 'Profile');
    $profileElements[] =
      array(
        'cid'   => $cid,
        'gid'   => $gid,
        'title' => $title,
        'html'  => $profile->run(),
     );
  }
  $page->assign('profileElements', $profileElements);

  // override the order and templates used for each dashboard element
  $event_rows = $smarty->get_template_vars('event_rows');
  $contribute_rows = $smarty->get_template_vars('contribute_rows');
  $groupIn = $smarty->get_template_vars('groupIn');

  $dashboardElements = array();
  if (isset($hid)) {
    $dashboardElements[] = array (
      'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Family.tpl',
      'sectionTitle' => 'Family Members',
      'sectionState' => 'open'
    );
    $dashboardElements[] = array (
      'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Relationship.tpl',
      'sectionTitle' => 'Other Related Individual(s)',
      'sectionState' => empty($others) ? 'closed' : 'open',
    );
  }

  $dashboardElements[] = array (
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Membership.tpl',
    'sectionTitle' => 'Membership Registration(s)',
    'sectionState' => empty($members) ? 'closed' : 'open',
  );
  $dashboardElements[] = array (
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Teacher.tpl',
    'sectionTitle' => 'Teacher Registration(s)',
    'sectionState' => empty($teachers) ? 'closed' : 'open',
  );
  $dashboardElements[] = array (
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Event.tpl',
    'sectionTitle' => 'Event Registration(s)',
    'sectionState' => empty($event_rows) ? 'closed' : 'open',
  );
  $dashboardElements[] = array (
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Contribute.tpl',
    'sectionTitle' => 'Recent Payment(s)',
    'sectionState' => empty($contribute_rows) ? 'closed' : 'open',
  );
  $dashboardElements[] = array (
    'templatePath' => 'CRM/Contact/Page/View/UserDashBoard/Group.tpl',
    'sectionTitle' => 'Mailing List(s)',
    'sectionState' => empty($groupIn) ? 'closed' : 'open',
  );
  $page->assign('dashboardElements', $dashboardElements);

  // override the page title (do this last as generating profiles also ovrides the title)
  CRM_Utils_System::setTitle($pgContact['display_name'], $pgContact['image_URL'] . ' ' . $pgContact['display_name']);
}

/**
 * Implements hook_civicrm_buildForm to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *  Reference to the form object.
 */
function osa_civicrm_buildForm($formName, &$form) {
  if (function_exists("osa_civicrm_buildForm_$formName")) {
    call_user_func("osa_civicrm_buildForm_$formName", $form);
  }
}

/**
 * Implements hook_civicrm_postProcess to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_postProcess($formName, &$form) {
  if (function_exists("osa_civicrm_postProcess_$formName")) {
    call_user_func("osa_civicrm_postProcess_$formName", $form);
  }
}

/**
 * Add custom procesing to CiviCRM Profile based forms
 *
 * @param $form
 *   The CRM_Profile_Form_Edit object being rendered.
 */
function osa_civicrm_buildForm_CRM_Profile_Form_Edit(&$form) {
  
  $gid = $form->getVar('_gid');
  $mode = $form->getVar('_mode');
  $hid = CRM_Utils_Request::retrieve('osa_hid', 'Positive');

  // if we are passed a household id add it to the form
  if (isset($hid)) {
    _osa_addHouseholdField($form, $hid);
  }
  
  // add a relationship type selection to the Related Individual profile form
  if ($gid == OSA_PROFILE_REL_INDIVIDUAL) {
    if ($mode == CRM_Profile_Form::MODE_CREATE) {
      _osa_addRelationshipField($form, $hid);
    }
  }
  
  // add CSS and javascript to profile forms in a colorbox
  $context = CRM_Utils_Request::retrieve('context', 'String');
  if ($context == 'boxload') {
    $smarty = CRM_Core_Smarty::singleton();
    $smarty->display('CRM/common/jquery.tpl');
    $smarty->display('CRM/common/commonCSS.tpl');
    $smarty->display('osa/boxload.tpl');
  }
}

function osa_civicrm_postProcess_CRM_Profile_Form_Edit(&$form) {

  $gid = $form->getVar('_gid');
  $mode = $form->getVar('_mode');
  $hid = CRM_Utils_Request::retrieve('osa_hid', 'Positive', null, false, null, 'POST');

  // if we just created a new contact and we have a household id, add the relationship
  if (($mode == CRM_Profile_Form::MODE_CREATE) && (isset($hid))) {
    $newId = $form->getVar('_id'); // contact created by profile form
    $type = OSA_REL_HOUSEHOLD_MEMBER;
    if ($gid == OSA_PROFILE_REL_INDIVIDUAL) {
      $type = _osa_getRelationshipField($form);
    }
    _osa_create_relationship($type, $newId, $hid, OSA_PERM_NONE);

    // set all of the other relationships
    _osa_manageHouseholdRelationships($hid);
  }

  // if we just created the household itself, set current user to be the head
  if (($mode == CRM_Profile_Form::MODE_CREATE) && ($gid == OSA_PROFILE_FAMILY)) {
    $newId = $form->getVar('_id'); // household created by profile form
    $cid = _osa_getContactId();
    _osa_create_relationship(OSA_REL_HEAD_HOUSEHOLD, $newId, $cid, OSA_PERM_OWNER);
    
    // set household primary phone & email to be the current user's
    $result = civicrm_api('contact', 'get', array('id' => $cid, 'version' => 3));
    $contact = $result['values'][$result['id']];
    $params = array(
      'id' => $newId,
      'email' => $contact['email'],
      'version' => 3,
    );
    if (isset($contact['phone'])) {
      $params['phone'] = $contact['phone'];
    }
    $result = civicrm_api('contact', 'create', $params);
  }
}

function osa_civicrm_buildForm_CRM_Contribute_Form_Contribution_Main(&$form) {
  
  $family = _osa_getHouseholdMembers(null, 'display_name');
  asort($family);
  $form->addElement('select', 'contact_id', ts('Family Member'), $family);
  $form->addRule('contact_id', ts('Please select a family member.'), 'required');
  $session = CRM_Core_Session::singleton();
  $form->setDefaults(array('contact_id' => $session->get('userID')));
  $form->assign('onbehalfFamily', true);

  $bltID = $form->_bltID;
  $form->removeElement("email-$bltID");
}

function osa_civicrm_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  drupal_set_message( var_export($entity_type) );
  CRM_Core_Error::debug('entity_type', $entity_type);

  return $element;
}
