<?php

/**
 * @file
 * Drupal Module for The Oakville Suzuki Association
 * - implements drupal and civicrm hooks
 */
require_once 'osa.inc';
require_once 'osa.civicrm.inc';
require_once 'osa.commerce.inc';
require_once 'osa.group_class.inc';
require_once 'osa.teacher.inc';

/**
 * Implements hook_menu() to add a configuration menu item
 */
function osa_menu() {
  $items = array();

  $items['admin/config/osa'] = array(
    'title' => 'Oakville Suzuki Association',
    'description' => 'Modify settings not available elsewhere',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osa_admin_settings'),
    'file' => 'osa.admin.inc',
  );

  return $items;
}

/**
 * This hook is called before a CiviCRM page is rendered and invokes the appropriate customization function.
 *
 * @param $page
 *   The page being rendered.
 */
function osa_civicrm_pageRun(&$page) {
  $name = $page->getVar('_name');

  if (function_exists("osa_civicrm_pageRun_$name")) {
    call_user_func_array("osa_civicrm_pageRun_$name", array(&$page));
  }
}

/**
 * Implements hook_civicrm_buildForm to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   Reference to the form object.
 */
function osa_civicrm_buildForm($formName, &$form) {

  if (function_exists("osa_civicrm_buildForm_$formName")) {

    // add all custom parameters to the form
    $ignore = array('q', 'reset', 'id', 'cid', 'gid', 'snippet', 'context', 'width', '_qf_ThankYou_display', 'qfKey');
    $parms = array_diff_key($_GET, array_flip($ignore));
    foreach ($parms as $name => $value) {
      _osa_addField($form, 'hidden', "osa_$name", $value);
    }
    foreach ($_POST as $name => $value) {
      if (substr($name, 0, 4) == 'osa_') {
        _osa_addField($form, 'hidden', $name, $value);
      }
    }
    
    // call the form specific function
    call_user_func_array("osa_civicrm_buildForm_$formName", array(&$form));
  }

  // special: check for the Email Task Forms
  if (substr($formName, -16) == '_Form_Task_Email') {
    osa_civicrm_buildForm_CRM_Contact_Form_Task_EmailCommon($form);
  }
}

/**
 * Implements hook_civicrm_validate to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_validate($formName, &$fields, &$files, &$form) {
  if (function_exists("osa_civicrm_validate_$formName")) {
    call_user_func_array("osa_civicrm_validate_$formName", array(&$fields, &$files, &$form));
  }
}

/**
 * Implements hook_civicrm_postProcess to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_postProcess($formName, &$form) {
  if (function_exists("osa_civicrm_postProcess_$formName")) {
    call_user_func_array("osa_civicrm_postProcess_$formName", array(&$form));
  }
}

/**
 * Implements hook_form_alter() to modify forms generated by Drupal modules
 */
function osa_form_alter(&$form, &$form_state, $form_id) {

  if (function_exists("osa_form_alter_$form_id")) {
    call_user_func_array("osa_form_alter_$form_id", array(&$form, &$form_state));
  }
}

/**
 * Implements hook_node_presave() to perform custom processing when Drupal content is saved
 */
function osa_node_presave($node) {

  if (function_exists("osa_node_presave_{$node->type}")) {
    call_user_func_array("osa_node_presave_{$node->type}", array(&$node));
  }
}

/**
 * Implements hook_webform_submission_presave() to process webform submissions
 */
function osa_webform_submission_presave($node, &$submission) {

  if (function_exists("osa_webform_submission_presave_{$node->nid}")) {
    call_user_func_array("osa_webform_submission_presave_{$node->nid}", array(&$node, &$submission));
  }
}

/**
 * Define custom options lists used in drop downs on webforms
 */
function osa_webform_select_options_info() {
  $items = array();

  $items['class_type'] = array(
    'title' => t('Group class types'), 
    'options callback' => 'osa_webform_options_class_types', 
    'file' => 'osa.group_class.inc',
  );

  $items['class_list'] = array(
    'title' => t('Group class'), 
    'options callback' => 'osa_webform_options_class_list', 
    'file' => 'osa.group_class.inc',
  );

  $items['session_list'] = array(
    'title' => t('Sessions'),
    'options callback' => 'osa_webform_options_session_list', 
    'file' => 'osa.group_class.inc',
  );

  return $items;
}

/**
 * Implements hook_clone_node_alter() to process the cloning of content
 */
function osa_clone_node_alter(&$node, $context) {

  if (function_exists("osa_clone_node_alter_{$context['original_node']->type}")) {
    call_user_func_array("osa_clone_node_alter_{$context['original_node']->type}", array(&$node, &$context));
  }
}

/**
 * Implements hook_mail() to build osa specific emails
 */
function osa_mail($key, &$message, $params) {

  if (function_exists("osa_mail_$key")) {
    call_user_func_array("osa_mail_$key", array(&$message, &$params));
  }
}
