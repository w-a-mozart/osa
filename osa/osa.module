<?php

/**
 * @file
 * Drupal Module for The Oakville Suzuki Association
 * - implements drupal and civicrm hooks
 */
require_once 'osa.inc';
require_once 'osa.civicrm.inc';
require_once 'osa.commerce.inc';
require_once 'osa.group_class.inc';
require_once 'osa.teacher.inc';
require_once 'osa.camp.inc';
require_once 'osa.quickbooks.inc';

// CiviCRM hooks

/**
 * This hook is called before a CiviCRM page is rendered and invokes the appropriate customization function.
 *
 * @param $page
 *   The page being rendered.
 */
function osa_civicrm_pageRun(&$page) {
  $name = $page->getVar('_name');

  if (function_exists("osa_civicrm_pageRun_$name")) {
    call_user_func_array("osa_civicrm_pageRun_$name", array(&$page));
  }
}

/**
 * Implements hook_civicrm_buildForm to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   Reference to the form object.
 */
function osa_civicrm_buildForm($formName, &$form) {
  if (function_exists("osa_civicrm_buildForm_$formName")) {

    // add all custom parameters to the form
    $ignore = array('q', 'reset', 'id', 'cid', 'gid', 'snippet', 'context', 'width', '_qf_ThankYou_display', 'qfKey', 'type');
    $parms = array_diff_key($_GET, array_flip($ignore));
    foreach ($parms as $name => $value) {
      _osa_addField($form, 'hidden', "osa_$name", $value);
    }
    foreach ($_POST as $name => $value) {
      if (substr($name, 0, 4) == 'osa_') {
        _osa_addField($form, 'hidden', $name, $value);
      }
    }
    
    // call the form specific function
    call_user_func_array("osa_civicrm_buildForm_$formName", array(&$form));
  }

  // special: check for the Email Task Forms
  if (substr($formName, -16) == '_Form_Task_Email') {
    osa_civicrm_buildForm_CRM_Contact_Form_Task_EmailCommon($form);
  }
}

/**
 * Implements hook_civicrm_validate to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_validate($formName, &$fields, &$files, &$form) {
  if (function_exists("osa_civicrm_validate_$formName")) {
    call_user_func_array("osa_civicrm_validate_$formName", array(&$fields, &$files, &$form));
  }
}

/**
 * Implements hook_civicrm_postProcess to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_postProcess($formName, &$form) {
  if (function_exists("osa_civicrm_postProcess_$formName")) {
    call_user_func_array("osa_civicrm_postProcess_$formName", array(&$form));
  }
}

/**
 * Implements hook_civicrm_alterPaymentProcessorParams to customize payment processing
 *
 */
function osa_civicrm_alterPaymentProcessorParams($paymentObj, &$rawParams, &$cookedParams) {
  // customize private lesson payments
  if (isset($rawParams['contributionPageID']) && ($rawParams['contributionPageID'] == OSA_CONTRIB_TEACHER)) {
    osa_civicrm_alterPaymentProcessorParams_teacher_registration($paymentObj, $rawParams, $cookedParams);
  }

  // add custom variables to the Elavon transaction
  if (isset($paymentObj) && ($paymentObj->_processorName == 'Elavon')) {
    $contact = _osa_get_contact(NULL, FALSE);
    $cookedParams['osa_name_card'] = htmlspecialchars($contact['display_name']);
    $cookedParams['osa_card_type'] = strtolower($rawParams['credit_card_type']);
    $cookedParams['osa_qb_name'] = htmlspecialchars(_osa_qb_name($contact['id']));
    $cookedParams['ssl_description'] = htmlspecialchars($cookedParams['ssl_description']);
    
    unset($cookedParams['ssl_ship_to_first_name']);
    unset($cookedParams['ssl_ship_to_last_name']);
    unset($cookedParams['ssl_customer_number']);
  }

  // modify the line item description for Event registrations
  if (isset($paymentObj) && ($paymentObj->_processorName == 'Drupal Commerce Cart') && ($cookedParams['type'] == 'civi_event')) {
    $participantID = $rawParams['participantID'];
    $eventID = $rawParams['eventID'];
    $event = civicrm_api('Event', 'getsingle', array('id' => $eventID, 'version' => 3,));
    if ($event['event_type_id'] != OSA_EVENT_SUMMER_CAMP) {
      $html = _osa_civicrm_participant_theme($participantID, 'short');
      $cookedParams['label'] = trim($html);
    }   
  }

  // @TODO fix this
  if (($rawParams['eventID'] == 1019) || ($rawParams['eventID'] == 2191)) {
    $cookedParams['quantity'] = ($cookedParams['amount'] / 12);
    $cookedParams['amount'] = 12;
  }  
}

/**
 * Implementation of hook_civicrm_alterMailer
 *
 * Replace the civicrm mailer with the drupal mailer
 */
function osa_civicrm_alterMailer(&$mailer, $driver, $params) {
  $mailer = new DrupalMailDriver($params);
}

class DrupalMailDriver {
  var $_params;

  function DrupalMailDriver($params)
  {
    $_params = $params;
  }

  function send($recipients, $headers, $body) {
    $mail_system = drupal_mail_system('osa', 'osa_civicrm');
    
    $message['id'] = 'osa_civicrm';
    $message['to'] = implode(", ", (array)$recipients);
    $message['subject'] = $headers['Subject'];
    
    // only send the html content
    if (strpos($headers['Content-Type'], 'multipart/alternative') !== false) {
      $b = strpos($headers['Content-Type'], 'boundary=') + strlen('boundary=');
      $boundary = str_replace('"', '', substr($headers['Content-Type'], $b));
    
      $start = strpos($body, 'Content-Type: text/html; charset=utf-8') + strlen('Content-Type: text/html; charset=utf-8') + 2;
      $length = strpos($body, "--{$boundary}--", $start) - $start - 2;
      $body = substr($body, $start, $length);

      $headers['Content-Type'] = 'text/html; charset=utf-8';
      $headers['Content-Transfer-Encoding'] = '8bit';
    }
    
    $message['body'] = $body;
    $message['headers'] = $headers;
    
    $result = $mail_system->mail($message);
  }
}

/**
 * Implements hook_civicrm_post to process CiviCRM database events (similar to triggers)
 */
function osa_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if (function_exists("osa_civicrm_post_{$objectName}")) {
    call_user_func_array("osa_civicrm_post_{$objectName}", array($op, $objectId, &$objectRef));
  }
}

/**
 *  Change the permissions checked when doing civicrm API calls.
 */
function osa_civicrm_alterAPIPermissions($entity, $action, &$params, &$permissions) {
  $permissions['relationship'] = array(
    'get' => array(
      'edit my contact',
    ),
    'update' => array(
      'edit my contact',
    ),
    'delete' => array(
      'edit my contact',
    ),
  );
}

// Drupal hooks

/**
 * Implements hook_menu() to add a configuration menu item
 */
function osa_menu() {
  $items = array();

  $items['admin/config/osa'] = array(
    'title' => 'Oakville Suzuki Association',
    'description' => 'Modify settings not available elsewhere',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osa_admin_settings'),
    'file' => 'osa.admin.inc',
  );

  $items['osa/participant/view'] = array(
    'title' => 'Participant Information',
    'description' => 'Custom page to display participant information',
    'access arguments' => array('access Contact Dashboard'),
    'page callback' => 'osa_civicrm_participant_view',
    'file' => 'osa.civicrm.inc',
    'type' => MENU_CALLBACK,
  );

  $items['osa/virtualmerchant/import'] = array(
    'title' => 'Virtual Merchant Import',
    'description' => 'Custom page to create QB transactions from Virtual Merchant transactions.',
    'access arguments' => array('access quickbooks webconnect server'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osa_virtualmerchant_import'),
    'file' => 'osa.quickbooks.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_html_head_alter() to modify the header elements
 */
function osa_html_head_alter(&$head_elements) {
  // add script to monitor page response time using pingdom.com
  if ($_SERVER['SERVER_NAME'] !== 'localhost') {
    $pingdom_script = <<<EOL
<script>
var _prum = [['id', '548f14e0abe53d455fd4de22'],
             ['mark', 'firstbyte', (new Date()).getTime()]];
(function() {
    var s = document.getElementsByTagName('script')[0]
      , p = document.createElement('script');
    p.async = 'async';
    p.src = '//rum-static.pingdom.net/prum.min.js';
    s.parentNode.insertBefore(p, s);
})();
</script>
EOL;
    $head_elements['pingdom'] = array(
      '#type' => 'markup',
      '#markup' => $pingdom_script,
    );
  }
}

/**
 * Implements hook_form_alter() to modify forms generated by Drupal modules
 */
function osa_form_alter(&$form, &$form_state, $form_id) {
  $form_type = _osa_get_form_type($form);
  if (isset($form_type) && function_exists("osa_form_alter_{$form_type}")) {
    call_user_func_array("osa_form_alter_{$form_type}", array(&$form, &$form_state));
  }
  
  if (function_exists("osa_form_alter_{$form_id}")) {
    call_user_func_array("osa_form_alter_{$form_id}", array(&$form, &$form_state));
  }
}

/**
 * Implements hook_node_presave() to perform custom processing when Drupal content is saved
 */
function osa_node_presave($node) {
  if (function_exists("osa_node_presave_{$node->type}")) {
    call_user_func_array("osa_node_presave_{$node->type}", array(&$node));
  }
}

/**
 * Implements hook_webform_submission_presave() to process webform submissions
 */
function osa_webform_submission_presave($node, &$submission) {
  $form_type = _osa_get_node_form_type($node);
  if (isset($form_type) && function_exists("osa_webform_submission_presave_{$form_type}")) {
    call_user_func_array("osa_webform_submission_presave_{$form_type}", array(&$node, &$submission));
  }

  if (function_exists("osa_webform_submission_presave_{$node->nid}")) {
    call_user_func_array("osa_webform_submission_presave_{$node->nid}", array(&$node, &$submission));
  }
}

/**
 * Implements hook_webform_submission_insert() to process webform submissions
 */
function osa_webform_submission_insert($node, $submission) {
  $form_type = _osa_get_node_form_type($node);
  if (isset($form_type) && function_exists("osa_webform_submission_insert_{$form_type}")) {
    call_user_func_array("osa_webform_submission_insert_{$form_type}", array(&$node, &$submission));
  }

  if (function_exists("osa_webform_submission_insert_{$node->nid}")) {
    call_user_func_array("osa_webform_submission_insert_{$node->nid}", array(&$node, &$submission));
  }
}

/**
 * Define custom options lists used in drop downs on webforms
 */
function osa_webform_select_options_info() {
  $items = array();

  // common lists
  $items['family_list'] = array(
    'title' => t('Family members'),
    'options callback' => 'osa_webform_options_family',
    'file' => 'osa.inc',
  );

  // group class option lists
  $items['class_type'] = array(
    'title' => t('Group class types'),
    'options callback' => 'osa_webform_options_class_types',
    'file' => 'osa.group_class.inc',
  );

  $items['class_list'] = array(
    'title' => t('Group class'),
    'options callback' => 'osa_webform_options_class_list',
    'file' => 'osa.group_class.inc',
  );

  $items['session_list'] = array(
    'title' => t('Sessions'),
    'options callback' => 'osa_webform_options_session_list',
    'file' => 'osa.group_class.inc',
  );

  // summer camp option lists
  
  return $items;
}

/**
 * Implements hook_clone_node_alter() to process the cloning of content
 */
function osa_clone_node_alter(&$node, $context) {
  if (function_exists("osa_clone_node_alter_{$context['original_node']->type}")) {
    call_user_func_array("osa_clone_node_alter_{$context['original_node']->type}", array(&$node, &$context));
  }
}

/**
 * Implements hook_mail() to build osa specific emails
 */
function osa_mail($key, &$message, $params) {
  if (function_exists("osa_mail_$key")) {
    call_user_func_array("osa_mail_$key", array(&$message, &$params));
  }
}

/**
 * Modify the user registration form
 */
function osa_form_alter_user_register_form(&$form, &$form_state) {
  $form['account']['name']['#title'] = t('Choose a username');
  $form['account']['name']['#description'] = t('Enter a username that is easy for you to remember. Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.');
  $form['account']['mail']['#description'] = t('Enter a valid e-mail address. New users are required to validate their e-mail address prior to logging into the site. After submitting this form, please check your inbox (or junk folder) for an e-mail from The Oakville Suzuki Association containing a link to validate your e-mail address and enter a new password.');

  if (!user_access('administer users')) {
    $form['#validate'][] = 'osa_user_register_validate';
  }
}

/**
 * Validate the user_register form
 */
function osa_user_register_validate($form, &$form_state) {
  // check the name and address to find bogus users
  if ((strncasecmp($form_state['input']['postal_code-1'], 'L', 1) != 0) && ($form_state['input']['first_name'] == $form_state['input']['last_name'])) {
    form_set_error('', t('An error occurred during your user registration. Please contact the registrar to complete the signup process.'));
    watchdog('spambot', 'Blocked registration: Same first and last name, and invalid postal code');
  }
}

/**
 * Modify the drupal user view
 */
function osa_user_view_alter(&$build) {
  if (isset($build['mimemail'])) {
    unset($build['mimemail']);
  }
}

/**
 * Implements hook_process_HOOK() for node.tpl.php.
 *
 * Hides read more links if a node has a body field that is not being trimmed.
 */
function osa_process_node(&$variables) {
  // Only proceed if we have a body and a "Read more" link in the first place.
  if (!isset($variables['content']['body']['#items'][0]['value']) || !isset($variables['content']['body'][0]['#markup'])) {
    return;
  }
  if (!isset($variables['content']['links']['node']['#links']['node-readmore'])) {
    return;
  }

  // Compare what will be displayed to the user against the full body value.
  $body_full    = preg_replace('/\s+/', '', strip_tags($variables['content']['body']['#items'][0]['value'], '<img>'));
  $body_display = preg_replace('/\s+/', '', strip_tags($variables['content']['body'][0]['#markup'], '<img>'));
  $trimmed = (bool)(strlen($body_full) > strlen($body_display));
  if (!$trimmed) {
    // Hide the "Read more" link by removing it from the render array.
    unset($variables['content']['links']['node']['#links']['node-readmore']);
  }
}

/**
 * Implements hook_js_alter to modify javascript added by other modules
 */
function osa_js_alter(&$javascript) {
};

/**
 * Implements hook_commerce_price_component_type_info.
 */
function osa_commerce_price_component_type_info() {
  $component_types = array();

  // Add custom discount types
  $discount_types = variable_get('osa_discount_types');
  $types = empty($discount_types) ? array() : explode(PHP_EOL, trim($discount_types));

  foreach ($types as $idx => $type) {
    $type = trim($type);
    if (!empty($type)) {
      $component_types["osa_discount_$idx"] = array(
        'title' => $type,
        'parent_type' => 'discount',
        'weight' => -40 + $idx,
      );
    }
  }

  return $component_types;
}

/**
 * Implements hook_commerce_price_formatted_components_alter.
 *
 * Change the way Order totals are displayed to consolidate discounts.
 */
function osa_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  if (isset($entity->commerce_order_total)) {
    foreach ($components as $type => $component) {
      $component_type = commerce_price_component_type_load($type);
      if (isset($component_type['parent_type'])) {
        $parent_type = commerce_price_component_type_load($component_type['parent_type']);
        $components[$component_type['parent_type']]['title'] = $parent_type['display_title'];
        $components[$component_type['parent_type']]['weight'] = $parent_type['weight'];
        if (!isset($components[$component_type['parent_type']]['price'])) {
          $components[$component_type['parent_type']]['price'] = commerce_price_field_data_auto_creation();
        }
        $components[$component_type['parent_type']]['price']['amount'] += commerce_currency_convert($component['price']['amount'], $component['price']['currency_code'], $components[$component_type['parent_type']]['price']['currency_code']);
        unset($components[$type]);
      }
    }
  }
}

function osa_views_post_render(&$view, &$output, &$cache) {
  // kuldge to allow commerce item labels to display html
  // note we had to chnage the label db column to TEXT from VARCHAR
  // @todo must be a better way
  if (($view->base_table == 'commerce_line_item') || ($view->base_table == 'commerce_order')) {
    $output = htmlspecialchars_decode($output);
  }
}

/**
 * Implements hook_views_query_alter() to modify view queries
 */
function osa_views_query_alter(&$view, &$query) {
  if (function_exists("osa_views_query_alter_{$view->name}")) {
    call_user_func_array("osa_views_query_alter_{$view->name}", array(&$view, &$query));
  }
  else {
    $generic_name = preg_replace('/^20[0-9][0-9]_/', '', $view->name);
    if (function_exists("osa_views_query_alter_{$generic_name}")) {
      call_user_func_array("osa_views_query_alter_{$generic_name}", array(&$view, &$query));
    }
  }
}

/**
 * Implements hook_watchdog_filtering to filter what gets added to the log table
 */
function osa_watchdog_filtering(array $log_entry) {
  $return = WATCHDOG_FILTERING_IGNORE;

  // Don't log some types of messages messages
  if (($log_entry['type'] == 'cron') ||
      ($log_entry['type'] == 'filter')) {
    return WATCHDOG_FILTERING_EXCLUDE;
  }

  // Don't log some anonymous messages (usually search bot)
  if ($log_entry['uid'] == 0) {
    if (($log_entry['type'] == 'civicrm') ||
        ($log_entry['type'] == 'access denied') ||
        ($log_entry['type'] == 'page not found')) {
      return WATCHDOG_FILTERING_EXCLUDE;
    }
  }

  // Don't log login failures
  if (($log_entry['uid'] == 0) &&
      ($log_entry['type'] == 'user') &&
      (strpos($log_entry['message'], 'Login attempt failed') !== FALSE)) {
    return WATCHDOG_FILTERING_EXCLUDE;
  }

  // Don't log spambot blocks (too many)
  if (($log_entry['uid'] == 0) &&
      ($log_entry['type'] == 'spambot') &&
      (strpos($log_entry['message'], 'Blocked registration:') !== FALSE)) {
    return WATCHDOG_FILTERING_EXCLUDE;
  }

  // "Always" watchdog error messages.
  if ($log_entry['severity'] == WATCHDOG_ERROR) {
    $return = WATCHDOG_FILTERING_INCLUDE;
  }

  return $return;
}
