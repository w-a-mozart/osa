<?php

/**
 * @file
 * Drupal Module for The Oakville Suzuki Association
 * - implements drupal and civicrm hooks
 */
require_once 'osa.inc';
require_once 'osa.civicrm.inc';
require_once 'osa.commerce.inc';
require_once 'osa.group_class.inc';
require_once 'osa.teacher.inc';

// CiviCRM hooks

/**
 * This hook is called before a CiviCRM page is rendered and invokes the appropriate customization function.
 *
 * @param $page
 *   The page being rendered.
 */
function osa_civicrm_pageRun(&$page) {
  $name = $page->getVar('_name');

  if (function_exists("osa_civicrm_pageRun_$name")) {
    call_user_func_array("osa_civicrm_pageRun_$name", array(&$page));
  }
}

/**
 * Implements hook_civicrm_buildForm to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   Reference to the form object.
 */
function osa_civicrm_buildForm($formName, &$form) {
  if (function_exists("osa_civicrm_buildForm_$formName")) {

    // add all custom parameters to the form
    $ignore = array('q', 'reset', 'id', 'cid', 'gid', 'snippet', 'context', 'width', '_qf_ThankYou_display', 'qfKey', 'type');
    $parms = array_diff_key($_GET, array_flip($ignore));
    foreach ($parms as $name => $value) {
      _osa_addField($form, 'hidden', "osa_$name", $value);
    }
    foreach ($_POST as $name => $value) {
      if (substr($name, 0, 4) == 'osa_') {
        _osa_addField($form, 'hidden', $name, $value);
      }
    }
    
    // call the form specific function
    call_user_func_array("osa_civicrm_buildForm_$formName", array(&$form));
  }

  // special: check for the Email Task Forms
  if (substr($formName, -16) == '_Form_Task_Email') {
    osa_civicrm_buildForm_CRM_Contact_Form_Task_EmailCommon($form);
  }
}

/**
 * Implements hook_civicrm_validate to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_validate($formName, &$fields, &$files, &$form) {
  if (function_exists("osa_civicrm_validate_$formName")) {
    call_user_func_array("osa_civicrm_validate_$formName", array(&$fields, &$files, &$form));
  }
}

/**
 * Implements hook_civicrm_postProcess to route requests to specific form overrides.
 *
 * @param string $formName
 *   The name of the form.
 * @param object $form
 *   A reference to the form object.
 */
function osa_civicrm_postProcess($formName, &$form) {
  if (function_exists("osa_civicrm_postProcess_$formName")) {
    call_user_func_array("osa_civicrm_postProcess_$formName", array(&$form));
  }
}

/**
 * Implements hook_civicrm_alterPaymentProcessorParams to customize payment processing
 *
 */
function osa_civicrm_alterPaymentProcessorParams($paymentObj, &$rawParams, &$cookedParams) {
  // customize private lesson payments
  if (isset($rawParams['contributionPageID']) && ($rawParams['contributionPageID'] == OSA_CONTRIB_TEACHER)) {
    osa_civicrm_alterPaymentProcessorParams_teacher_registration($paymentObj, $rawParams, $cookedParams);
  }

  // add custom variables to the Elavon transaction
  if (isset($paymentObj) && ($paymentObj->_processorName == 'Elavon')) {
    $contact = _osa_get_contact(NULL, FALSE);
    $cookedParams['osa_name_card'] = $contact['display_name'];
    $cookedParams['osa_card_type'] = $rawParams['credit_card_type'];
    unset($cookedParams['ssl_customer_number']);
  }
}

/**
 * Implements hook_civicrm_alterMailParams to customize emails sent from CiviCRM
 *
 */
function osa_civicrm_alterMailParams(&$params) {
  // Log the email to the maillog
  if (variable_get('maillog_log', TRUE)) {
    $record = new stdClass;

    $record->header_all = serialize(array());
    $record->header_message_id = NULL;
    $record->header_from = isset($params['from']) ? $params['from'] : NULL;
    $record->header_to = isset($params['toName']) ? "{$params['toName']} " : '';
    $record->header_to .= isset($params['toEmail']) ? "<{$params['toEmail']}>" : '';
    $record->header_reply_to = isset($params['returnPath']) ? $params['returnPath'] : '';
    $record->subject = isset($params['subject']) ? $params['subject'] : '';
    $record->body = isset($params['html']) ? $params['html'] : '';
    $record->sent_date = REQUEST_TIME;

    drupal_write_record('maillog', $record);
  }
}

// Drupal hooks

/**
 * Implements hook_menu() to add a configuration menu item
 */
function osa_menu() {
  $items = array();

  $items['admin/config/osa'] = array(
    'title' => 'Oakville Suzuki Association',
    'description' => 'Modify settings not available elsewhere',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osa_admin_settings'),
    'file' => 'osa.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter() to modify forms generated by Drupal modules
 */
function osa_form_alter(&$form, &$form_state, $form_id) {
  if (function_exists("osa_form_alter_$form_id")) {
    call_user_func_array("osa_form_alter_$form_id", array(&$form, &$form_state));
  }
}

/**
 * Implements hook_node_presave() to perform custom processing when Drupal content is saved
 */
function osa_node_presave($node) {
  if (function_exists("osa_node_presave_{$node->type}")) {
    call_user_func_array("osa_node_presave_{$node->type}", array(&$node));
  }
}

/**
 * Implements hook_webform_submission_presave() to process webform submissions
 */
function osa_webform_submission_presave($node, &$submission) {
  if (function_exists("osa_webform_submission_presave_{$node->nid}")) {
    call_user_func_array("osa_webform_submission_presave_{$node->nid}", array(&$node, &$submission));
  }
}

/**
 * Define custom options lists used in drop downs on webforms
 */
function osa_webform_select_options_info() {
  $items = array();

  // group class option lists
  $items['class_type'] = array(
    'title' => t('Group class types'), 
    'options callback' => 'osa_webform_options_class_types', 
    'file' => 'osa.group_class.inc',
  );

  $items['class_list'] = array(
    'title' => t('Group class'), 
    'options callback' => 'osa_webform_options_class_list', 
    'file' => 'osa.group_class.inc',
  );

  $items['session_list'] = array(
    'title' => t('Sessions'),
    'options callback' => 'osa_webform_options_session_list', 
    'file' => 'osa.group_class.inc',
  );

  return $items;
}

/**
 * Implements hook_clone_node_alter() to process the cloning of content
 */
function osa_clone_node_alter(&$node, $context) {
  if (function_exists("osa_clone_node_alter_{$context['original_node']->type}")) {
    call_user_func_array("osa_clone_node_alter_{$context['original_node']->type}", array(&$node, &$context));
  }
}

/**
 * Implements hook_mail() to build osa specific emails
 */
function osa_mail($key, &$message, $params) {
  if (function_exists("osa_mail_$key")) {
    call_user_func_array("osa_mail_$key", array(&$message, &$params));
  }
}

/**
 * Modify the user registration form
 */
function osa_form_alter_user_register_form(&$form, &$form_state) {
  $form['account']['name']['#title'] = t('Choose a username');
  $form['account']['name']['#description'] = t('Enter a username that is easy for you to remember. Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.');
  $form['account']['mail']['#description'] = t('Enter a valid e-mail address. New users are required to validate their e-mail address prior to logging into the site. After submitting this form, please check your inbox (or junk folder) for an e-mail from The Oakville Suzuki Association containing a link to validate your e-mail address and enter a new password.');
}

/**
 * Modify the drupal user view
 */
function osa_user_view_alter(&$build) {
  if (isset($build['mimemail'])) {
    unset($build['mimemail']);
  }
}

/**
 * Implements hook_process_HOOK() for node.tpl.php.
 *
 * Hides read more links if a node has a body field that is not being trimmed.
 */
function osa_process_node(&$variables) {
  // Only proceed if we have a body and a "Read more" link in the first place.
  if (!isset($variables['content']['body']['#items'][0]['value']) || !isset($variables['content']['body'][0]['#markup'])) {
    return;
  }
  if (!isset($variables['content']['links']['node']['#links']['node-readmore'])) {
    return;
  }

  // Compare what will be displayed to the user against the full body value.
  $body_full    = preg_replace('/\s+/', '', strip_tags($variables['content']['body']['#items'][0]['value'], '<img>'));
  $body_display = preg_replace('/\s+/', '', strip_tags($variables['content']['body'][0]['#markup'], '<img>'));
  $trimmed = (bool)(strlen($body_full) > strlen($body_display));
  if (!$trimmed) {
    // Hide the "Read more" link by removing it from the render array.
    unset($variables['content']['links']['node']['#links']['node-readmore']);
  }
}

/**
 * Implements hook_commerce_price_component_type_info.
 */
function osa_commerce_price_component_type_info() {
  $component_types = array();

  // Add custom discount types
  $discount_types = variable_get('osa_discount_types');
  $types = empty($discount_types) ? array() : explode(PHP_EOL, trim($discount_types));

  foreach ($types as $idx => $type) {
    $type = trim($type);
    if (!empty($type)) {
      $component_types["osa_discount_$idx"] = array(
        'title' => $type,
        'parent_type' => 'discount',
        'weight' => -40 + $idx,
      );
    }
  }

  return $component_types;
}

/**
 * Implements hook_commerce_price_formatted_components_alter.
 *
 * Change the way Order totals are displayed to consolidate discounts.
 */
function osa_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  if (isset($entity->commerce_order_total)) {
    foreach ($components as $type => $component) {
      $component_type = commerce_price_component_type_load($type);
      if (isset($component_type['parent_type'])) {
        $parent_type = commerce_price_component_type_load($component_type['parent_type']);
        $components[$component_type['parent_type']]['title'] = $parent_type['display_title'];
        $components[$component_type['parent_type']]['weight'] = $parent_type['weight'];
        if (!isset($components[$component_type['parent_type']]['price'])) {
          $components[$component_type['parent_type']]['price'] = commerce_price_field_data_auto_creation();
        }
        $components[$component_type['parent_type']]['price']['amount'] += commerce_currency_convert($component['price']['amount'], $component['price']['currency_code'], $components[$component_type['parent_type']]['price']['currency_code']);
        unset($components[$type]);
      }
    }
  }
}
