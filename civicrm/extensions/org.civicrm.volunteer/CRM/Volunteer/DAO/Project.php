<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2017                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 *
 * Generated from xml/schema/CRM/Volunteer/Project.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:0cc6bd7fbb62a42a6e8bee7c94aba5ef)
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
/**
 * CRM_Volunteer_DAO_Project constructor.
 */
class CRM_Volunteer_DAO_Project extends CRM_Core_DAO {
  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_volunteer_project';
  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var boolean
   */
  static $_log = true;
  /**
   * Project Id
   *
   * @var int unsigned
   */
  public $id;
  /**
   * The title of the Volunteer Project
   *
   * @var string
   */
  public $title;
  /**
   * Full description of the Volunteer Project. Text and HTML allowed. Displayed on sign-up screens.
   *
   * @var text
   */
  public $description;
  /**
   * Entity table for entity_id (initially civicrm_event)
   *
   * @var string
   */
  public $entity_table;
  /**
   * Implicit FK project entity (initially eventID).
   *
   * @var int unsigned
   */
  public $entity_id;
  /**
   * Is this need enabled?
   *
   * @var boolean
   */
  public $is_active;
  /**
   * FK to Location Block ID
   *
   * @var int unsigned
   */
  public $loc_block_id;
  /**
   * The campaign associated with this Volunteer Project.
   *
   * @var int unsigned
   */
  public $campaign_id;
  /**
   * Class constructor.
   */
  function __construct() {
    $this->__table = 'civicrm_volunteer_project';
    parent::__construct();
  }
  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static ::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName() , 'loc_block_id', 'civicrm_loc_block', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName() , 'campaign_id', 'civicrm_campaign', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('CiviVolunteer Project ID', array('domain' => 'org.civicrm.volunteer')) ,
          'description' => 'Project Id',
          'required' => true,
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
        ) ,
        'title' => array(
          'name' => 'title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Title', array('domain' => 'org.civicrm.volunteer')) ,
          'description' => 'The title of the Volunteer Project',
          'required' => true,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
        ) ,
        'description' => array(
          'name' => 'description',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Description', array('domain' => 'org.civicrm.volunteer')) ,
          'description' => 'Full description of the Volunteer Project. Text and HTML allowed. Displayed on sign-up screens.',
          'required' => false,
          'rows' => 8,
          'cols' => 60,
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
          'html' => array(
            'type' => 'RichTextEditor',
          ) ,
        ) ,
        'entity_table' => array(
          'name' => 'entity_table',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Entity Table', array('domain' => 'org.civicrm.volunteer')) ,
          'description' => 'Entity table for entity_id (initially civicrm_event)',
          'required' => true,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
        ) ,
        'entity_id' => array(
          'name' => 'entity_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Implicit FK project entity (initially eventID).',
          'required' => true,
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
        ) ,
        'is_active' => array(
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Enabled', array('domain' => 'org.civicrm.volunteer')) ,
          'description' => 'Is this need enabled?',
          'required' => true,
          'default' => '1',
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
        ) ,
        'loc_block_id' => array(
          'name' => 'loc_block_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Location Block ID') ,
          'description' => 'FK to Location Block ID',
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
          'FKClassName' => 'CRM_Core_DAO_LocBlock',
        ) ,
        'campaign_id' => array(
          'name' => 'campaign_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Campaign', array('domain' => 'org.civicrm.volunteer')) ,
          'description' => 'The campaign associated with this Volunteer Project.',
          'required' => false,
          'table_name' => 'civicrm_volunteer_project',
          'entity' => 'Project',
          'bao' => 'CRM_Volunteer_DAO_Project',
          'FKClassName' => 'CRM_Campaign_DAO_Campaign',
        ) ,
      );
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }
  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName() {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog() {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'volunteer_project', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'volunteer_project', $prefix, array());
    return $r;
  }
}
