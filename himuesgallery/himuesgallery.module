<?php
/**
 * @file
 * defines the node-type himuesgallery
 */

/**
 * Definition of constants
 */
 define("HIMUESGALLERYINPICTUREDIR", "--- himuesgallery.css in PictureDir ---");
 define("PLEASESELECTDIRECTORY","--- Please select a directory ---");
 define("PLEASESELECTCSSFILE", "--- Please select css file ---");

 
function _get_pathes() {
 $base = base_path();
 $len = strlen($base);
 $base = (substr($base, $len-1, 2) == "/") ? substr($base, 0, $len-1) : $base;
 $start = strlen(DRUPAL_ROOT);

 $pathes['FILES_PATH']                   = 'public://';
 $pathes['FILES_REAL_PATH']              = $base . substr(drupal_realpath($pathes['FILES_PATH']), strlen(DRUPAL_ROOT)). "/";
 $pathes['HIMUESGALLERY_PATH']           = $pathes['FILES_REAL_PATH'] . variable_get('himuesgallery_admin_settigs', '') . "/";
 $pathes['HIMUESGALLERY_REAL_PATH']      = DRUPAL_ROOT . substr(drupal_realpath($pathes['FILES_PATH']), strlen(DRUPAL_ROOT)) . "/" . variable_get('himuesgallery_admin_settigs', '') . "/";

	return $pathes;
}

/**
 * Implementation of hook_node_info();
 */
function himuesgallery_node_info() {
  $t = get_t();
  return array(
    'himuesgallery' => array(
    'name' => $t('himuesgallery'),
    'base' => 'himuesgallery',
    'description' => $t('A simple gallery module that shows all pictures in a folder'),
    'has_title' => TRUE,
    'title_label' => $t('Title'),
    )
  );
}


/**
 * Implementation of hook_menu();
 */
function himuesgallery_menu() {
  $items['admin/himuesgallery'] = array(
    'title' => 'Himues Gallery',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('himuesgallery_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Form creation
 */
function himuesgallery_admin_settings() {
  $pathes=_get_pathes();
  $himuesgallerypath = variable_get('himuesgallery_admin_settigs');
  $form['himuesgallery_admin_settigs'] = array(
    '#type' => 'textfield',
    '#title' => t('The base directory of the gallerys for this site relativ to "%filesdir"', array('%filesdir' => $pathes['FILES_PATH'])),
    '#default_value' => isset($himuesgallerypath) ? $himuesgallerypath : "himuesgallery",
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_menu_alter();
 */
function himuesgallery_menu_alter(&$callbacks) {
  //If the user dosn't have the right 'administer nodes', the menu element isn't visible.
  if (!user_access('administer nodes')) {
    $callbacks['node/add/himuesgallery']['access callback'] = FALSE;
    unset($callbacks['node/add/himuesgallery']['access arguments']);
  }
}


/**
 * Implementation of hook_perm();
 */
function himuesgallery_permission() {
  $t = get_t();
  return array(
    'create himuesgallery' => array(
    	'title' => $t('create himuesgallery'),
    	'description' => $t(''),
    	),
    'edit own himuesgallery' => array(
    	'title' => $t('edit own himuesgallery'),
    	'description' => $t(''),
    	),
    
    'edit any himuesgallery' => array(
    	'title' => $t('edit any himuesgallery'),
    	'description' => $t(''),
    	),
    
    'delete own himuesgallery' => array(
    	'title' => $t('delete own himuesgallery'),
    	'description' => $t(''),
    	),
    
    'delete all himuesgallery' => array(
    	'title' => t('delete all himuesgallery'),
    	'description' => $t(''),
    	)    
    );
}


/**
 * Implementation of hook_validate();
 */
function himuesgallery_validate($node, &$form_state) {
  $t = get_t();
  
  //Test if an gallerie-folder ist selected
  if ($node->gallery_path == PLEASESELECTDIRECTORY) {
    form_set_error('gallery_path', $t('You have to select a directory'));
  }

  //Test if a css-file is selected
  if ($node->css_path == PLEASESELECTCSSFILE) {
    form_set_error('css_path', $t('You have to select a CSS file'));
  }
}

/**
 * Implementation of hook_insert();
 */
function himuesgallery_insert($node) {
  //get size of Thumbnails from css-file
  $thumbnail_sizes = _get_thumbnail_size($node);

    db_insert('himuesgallery')
    ->fields(array(
    	'nid'         							=> $node->nid,
    	'vid'         							=> $node->vid,
    	'gallerypath' 							=> $node->gallery_path,
    	'showtype'									=> $node->showtype,
    	'thumbnail_picture_quality'	=> 75,
    	'thumbnail_picture_width'		=> $thumbnail_sizes['width'],
    	'thumbnail_picture_height'	=> $thumbnail_sizes['height'],
        'thumbnail_aspect_ratio'			=> $node->thumbnail_aspect_ratio,
    	'thumbnail_sort_order'			=> $node->thumbnail_sort_order,
    	'css_path'									=> $node->css_path,
   		))
   		->execute();
}

/**
 * Implementation of hook_update();
 */
function himuesgallery_update($node) {
  if ($node->revision) {
    //new revision is like a new node
    himuesgallery_insert($node);
  }
  else {

    //get size of Thumbnails from css-file
    $thumbnail_sizes = _get_thumbnail_size($node);

		$num_updated = db_update('himuesgallery')
      ->fields(array(
      'gallerypath'								=> $node->gallery_path,
      'showtype'									=> $node->showtype,
      'thumbnail_picture_quality'	=> 75,
      'thumbnail_picture_width'		=> $thumbnail_sizes['width'],
      'thumbnail_picture_height'	=> $thumbnail_sizes['height'],
      'thumbnail_sort_order'			=> $node->thumbnail_sort_order,
      'thumbnail_aspect_ratio'			=> $node->thumbnail_aspect_ratio,
      'css_path'									=> $node->css_path,
      ))
      ->condition('vid', $node->vid)
      ->execute();
  }

  //if there are any thumbnails -> delete them. On next gallery-show they will be recreated.
  $pathes = _get_pathes();
	$pfad =  $pathes['HIMUESGALLERY_REAL_PATH'] . $node->gallery_path . "/thumbs";
  _himuesgallery_delete_thumbnails($pfad);
}

/**
 * Implementation of hook_delete();
 */
function himuesgallery_delete($node) {
	db_delete('himuesgallery')
		->condition('nid', $node->nid)
		->execute();
}

/**
 * Implementation of hook_load();
 */
function himuesgallery_load($nodes) {
	$result = db_query('SELECT nid, gallerypath as gallery_path, showtype, thumbnail_picture_quality, thumbnail_picture_width, thumbnail_picture_height, thumbnail_sort_order, thumbnail_aspect_ratio, css_path FROM {himuesgallery} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->gallery_path 							= $record->gallery_path;
    $nodes[$record->nid]->showtype 									= $record->showtype;
    $nodes[$record->nid]->thumbnail_picture_quality = $record->thumbnail_picture_quality;
    $nodes[$record->nid]->thumbnail_picture_width   = $record->thumbnail_picture_width;
    $nodes[$record->nid]->thumbnail_picture_height  = $record->thumbnail_picture_height;
    $nodes[$record->nid]->thumbnail_sort_order      = $record->thumbnail_sort_order;
    $nodes[$record->nid]->thumbnail_aspect_ratio    = $record->thumbnail_aspect_ratio;
    $nodes[$record->nid]->css_path                  = $record->css_path;
  }
}

/**
 * Implementation of hook_theme();
 */
function himuesgallery_theme($existing, $type, $theme, $path) {
  $pathes = _get_pathes();
  return array(
    'himuesgallery' => array(
      'template' => 'himuesgallery',  //Use file himuesgallery.tpl.php in Module-dir as Theme
      'variables' => array('node' => NULL, 'picturelist' => NULL, 'path' => $pathes['HIMUESGALLERY_PATH']),
    ),
  );
}

/**
 * Implementation of hook_view();
 */
function himuesgallery_view($node, $viewmode) {
	$pathes = _get_pathes();

  //if css-file himuesgallery.css in PictureDir should be used we need to get the path
  if ($node->css_path == HIMUESGALLERYINPICTUREDIR) {
    $css_path = $pathes['HIMUESGALLERY_PATH'] . $node->gallery_path . "/himuesgallery.css";
  }
  else {
    $css_path = drupal_get_path('module', 'himuesgallery') . "/css/" . $node->css_path;
  }

  drupal_add_css(($css_path[0] == "/") ? substr($css_path, 1) : $css_path); //first character in path should not be "/"

  $picturelist = _himuesgallery_get_picturelist($node, $pathes);

  $node->content['gallery_path'] = array(
      '#markup' => theme('himuesgallery', array('node' => $node, 'picturelist' => $picturelist)),
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implementation of form_alter();
 */
function himuesgallery_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'himuesgallery_node_form') {

    //If $form['nid']['#markup'] is empty, this is the form for a new node
    //otherwise we change an existing gallery-node
    //If this is a new node we don't want to ptomote it on the frontpage
    if ($form_id == "himuesgallery_node_form") {
    	if (empty($form['nid']['#markup'])) {
      	$form['options']['promote']['#default_value'] = 0;
    	}
    }
  }
}

/**
 * Implementation of hook_form();
 */
function himuesgallery_form($node, &$form_state) {
  $t = get_t();
	$pathes = _get_pathes();
  $type = node_type_get_types('type', $node);
  $type=$type['himuesgallery'];
  $array_of_dirs = array();
  $array_of_css_files = array();
  
  //-----------------------------------------------

  //read the subdirs and files under the gallery-standard-path wich is set in administration
  $path_length=drupal_strlen($pathes['HIMUESGALLERY_REAL_PATH'])+1;
  
  $temp_array_of_dirs = file_scan_directory( $pathes['HIMUESGALLERY_REAL_PATH'], '/\/*/', array('nomask' => '/(\.\.?|CVS|thumbs)$/', 'recurse' => FALSE, 'key' => 'filename'));

  foreach ($temp_array_of_dirs as $dir) {
		if (is_dir($dir->uri)) {
			//change the path to the gallerydirs, e.g. "public://himuesgallery/gallerydir" to "gallerydir"
      $array_of_dirs[] = drupal_substr($dir->uri, $path_length);
      $temp_array_of_dirs2 = file_scan_directory($dir->uri, '/\/*/', array('nomask' => '/(\.\.?|CVS|thumbs)$/', 'recurse' => FALSE, 'key' => 'filename'));
      foreach ($temp_array_of_dirs2 as $dir2) {
        if (is_dir($dir2->uri)) {
          $array_of_dirs[] = drupal_substr($dir2->uri, $path_length);
          $temp_array_of_dirs3 = file_scan_directory($dir2->uri, '/\/*/', array('nomask' => '/(\.\.?|CVS|thumbs)$/', 'recurse' => FALSE, 'key' => 'filename'));
          foreach ($temp_array_of_dirs3 as $dir3) {
            if (is_dir($dir3->uri)) {
              $array_of_dirs[] = drupal_substr($dir3->uri, $path_length);
            }
          }
        }
      }
    }
  }

  //sort the file in descending order. this helps maybe if the dirs named like <date>-Foldername
  //the newest files are on top of the list then
  rsort($array_of_dirs);

  array_unshift($array_of_dirs, PLEASESELECTDIRECTORY);

  if (isset($node->gallery_path)) {
    $index = array_search(drupal_substr($node->gallery_path, $path_length), $array_of_dirs);
    if ($index) {
      $default_path_value = $index;
    }
    else {
      $default_path_value = 0;
    }
  }
  else {
    $default_path_value = 0;
  }

  //-----------------------------------------------

  $csspath=drupal_get_path('module', 'himuesgallery') . "/css";
  $array_of_css_files_length=drupal_strlen($csspath);

  //read list of css-files from module-path
  $temp_array_of_css = file_scan_directory($csspath, '/\/*.css/', array('nomask' => '/(\.\.?|CVS|thumbs)$/', 'recurse' => FALSE, 'key' => 'filename'));
  foreach ($temp_array_of_css as $css) {

    $array_of_css_files[] = $css->filename;
  }

  //This placeholder is to select himuesgallery.css in Picturedir
  array_unshift($array_of_css_files, HIMUESGALLERYINPICTUREDIR);


  array_unshift($array_of_css_files, PLEASESELECTCSSFILE);

  $default_css_path_value = 0;
  if (isset($node->css_path)) {
    if ($node->css_path == HIMUESGALLERYINPICTUREDIR){  //--- himuesgallery.css in PictureDir ---
      $default_css_path_value = 1;
    }
    else {
      $cssindex = array_search(drupal_substr($node->css_path, $array_of_css_files_length), $array_of_css_files);
      if ($cssindex) {
        $default_css_path_value = $cssindex;
      }
    }
  }

	
  //-----------------------------------------------
  $form['main'] = array(
    '#title' => $t('Gallerie Settings'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#weight' => -10
  );

  $form['main']['title'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => check_plain($type->title_label),
    '#default_value' => check_plain($node->title),
    '#maxlength' => 255,
    '#weight' => -10,
  );

  //-----------------------------------------------

  $form['main']['gallery_subdirs'] = array(
    '#type' => 'value',
    '#markup' => drupal_map_assoc($array_of_dirs),
    '#weight' => -9
  );

  $form['main']['gallery_path'] = array(
    '#type' => 'select',
    '#options' => $form['main']['gallery_subdirs']['#markup'],
    '#required' => TRUE,
    '#title' => $t('Gallery Path Select'),
    '#default_value' => isset($node->gallery_path) ? $node->gallery_path : $default_path_value,
    '#description' => $t('relative to %pathes', array("%pathes" => $pathes['HIMUESGALLERY_PATH'])),
    '#weight' => -9,
  );


  //-----------------------------------------------

  $form['main']['css_subdirs'] = array(
    '#type' => 'value',
    '#markup' => drupal_map_assoc($array_of_css_files)
  );

  $form['main']['css_path'] = array(
    '#type' => 'select',
    '#options' => $form['main']['css_subdirs']['#markup'],
    '#required' => TRUE,
    '#title' => $t('css file to use for this gallery'),
    '#default_value' => isset($node->css_path) ? $node->css_path : $default_css_path_value,
    '#weight' => -8,
  );

  //-----------------------------------------------


  $form['main']['thumbnail_sort_order'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => $t('Sortorder for thumbnails'),
    '#options' => array(
      $t('asc'),
      $t('desc')
    ),
    '#default_value' => isset($node->thumbnail_sort_order) ? $node->thumbnail_sort_order : 0,
    '#weight' => -7,
  );

  $form['main']['showtype'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => $t('Showtype (Lightshow, Lightvideo)'),
    '#options' => array(
      $t('Single Picture'),
      $t('Single Picture - Continue'),
      $t('Lightshow'),
//     $t('Lightvideo')
    ),
    '#default_value' => isset($node->showtype) ? $node->showtype : 2,
    '#weight' => -7,
  );

  $form['main']['thumbnail_aspect_ratio'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => $t('Respect aspect ratio for thumbnails'),
    '#options' => array(
      $t('no'),
      $t('yes')
    ),
    '#default_value' => isset($node->thumbnail_aspect_ratio) ? $node->thumbnail_aspect_ratio : 0,
    '#weight' => -7,
  );
  return $form;

}

//----------------------------------------------------------------------

/* Parse description for Text and convert it
 *
 * you can highlight description if you use following topics in the filename like html
 * e.g. you name an file "001-This is.red.text.-red. but this not"
 * show you an description under the thumbnail where the word "text" will be shown in red color
 * also you can show characters that normaly can not be in an filename, like ? or "
 */
function _himuesgallery_convert_description($description, $file) {
  $search = array(
    ".br.",
    ".-i.",
    ".i.",
    ".-b.",
    ".b.",
    ".ap.",
    ".es.",
    ".af.",
    ".qm.",
    ".bs.",
    ".-red.",
    ".red.",
    ".-blue.",
    ".blue.",
    ".-green.",
    ".green.",
    "_",
    ".qe.",
    ".fz.",
    ".-right.",
    ".right.",
    ".-left.",
    ".left.",
    ".-center.",
    ".center.",
    ".auml",
    ".Auml.",
    ".ouml.",
    ".Ouml.",
    ".uuml.",
    ".Uuml.",
    ".szlig.",
  );

  $replace = array(
    "<br />",
    "</i>",
    "<i>",
    "</b>",
    "<b>",
    "'",
    "'",
    '"',
    '"',
    "\\",
    "</font>",
    "<font color=red>",
    "</font>",
    "<font color=blue>",
    "</font>",
    "<font color=green>",
    " ",
    '?',
    '?',
    "</div>",
    "<div align=right>",
    "</div>",
    "<div align=left>",
    "</div>",
    "<div align=center>",
    ".auml",
    ".&uml;",
    "&ouml;",
    "&Ouml;",
    "&uuml;",
    "&Uuml;",
    "&szlig;",
);

  $description = str_ireplace($search, $replace, $description);

  if (drupal_substr($description, 0, 8) == "-noname-") $description = "&nbsp;";      //"-noname-" will not be shown, eg. filename "001--noname-" - nothing will be shown under the picture

	//at this point $description is = filename
  $description=_himuesgallery_link_detect($description, $file);

  return $description;
}

//----------------------------------------------------------------------

function _himuesgallery_link_detect($description, $file) {
  //If Filename has a tag ".link." search for a file that has name of the picture with extension ".inc"
  //e.g. picture is: 001-picture_.link._.jpg serach for 001-picture_.link._.inc
  //if found, read the first and second line and replace the tag .link. with it
  //first line is the text that will be shown
  //second line ist the link-address
  //third line could be _blank, _self, _parent, _top

  $targets = array("_blank", "_self", "_parent", "_top");
  
  if (stristr($description, ".link.")) {
  	$linkfile = drupal_substr($file->uri, 0, -4)  . ".inc";

  	if (is_file( $linkfile )) {
  	  $handle = fopen($linkfile, "r");
  	  	//read the first line of the file.
		$text = fgets($handle, 200);
  	  	$destination = fgets($handle, 200);
  	  	$target = drupal_strtolower(fgets($handle, 200));
  	  	if (!in_array($target, $targets)) {
  	  	  $target = "_blank";
  	  	}
  	  fclose($handle);
  	  
  	  //for security reasons
  	  $text = htmlentities($text, ENT_QUOTES);
  	  $destination = htmlentities($destination, ENT_QUOTES);
  	  $target =  htmlentities($target, ENT_QUOTES);
  	  $link = '<a href="' . $destination . '" target="' . $target . '">' . $text . '</a>';
  	  $description = str_ireplace(".link.", $link, $description);
  	  
  	}
  }

  return $description;
}

//----------------------------------------------------------------------
/*
 * Creates an array with the list of pictures
 */
function _himuesgallery_get_picturelist($node, $pathes) {
  $t = get_t();
  $i = 0;
  $files = array(); //create an empty array to avoid errors with empty directorys
  
  if (is_dir( $pathes['HIMUESGALLERY_REAL_PATH'] . $node->gallery_path)) {
    $dirfiles = file_scan_directory( $pathes['HIMUESGALLERY_REAL_PATH'] . $node->gallery_path, "/\.YT$|\.yt$|\.JPG$|\.jpg$|\.GIF$|\.gif$|\.PNG$|\.png$/", array('recurse' => FALSE, 'key' => 'filename'));

    foreach ($dirfiles as $file) {
      //Test, if this is one of the supported filetypes. Otherwise ignore the file.
      $files[$i]['File'] = $file->filename;

      //If first three charachters are an integer and fourth character is an "-" then dont show these charachters
      //So you can sort the files in any aorder you want if you number it
      if ((drupal_strlen($file->name) > 3) AND (intval(drupal_substr($file->name, 0, 3)) <> 0) AND ($file->name[3] == "-")) {
        $files[$i]['description'] = _himuesgallery_convert_description(drupal_substr($file->name, 4), $file);
      }
      //if no leading integer, the first 4 charachters are member of the filename.
      else {
        $files[$i]['description'] = _himuesgallery_convert_description($file->name, $file);
      }

      $picture_info = getimagesize( $pathes['HIMUESGALLERY_REAL_PATH'] . $node->gallery_path . "/" . $file->filename);
      if ($picture_info) {
        $files[$i]['width'] = $picture_info[0];
        $files[$i]['height'] = $picture_info[1];
        $files[$i]['type'] = $picture_info[2];
        $files[$i]['mime'] = $picture_info['mime'];
      } else {
        // assume youtube video id
        $files[$i]['type']   = 'youtube';
      }
      
      $i++;
    }//foreach

    if ($node->thumbnail_sort_order<>0) {
      usort($files, "_himuesgallery_rsort_thumbnails");
    }
    else {
      usort($files, "_himuesgallery_sort_thumbnails");
    }
  }
  else {
    drupal_set_message($t('The selected directory <b>') . $pathes['HIMUESGALLERY_PATH'] . $node->gallery_path . t('</b> does not exist.<br /> Please check the settings of this gallery.'));
  }

  return $files;
}

//----------------------------------------------------------------------

function _himuesgallery_sort_thumbnails($a, $b) {
  return strcmp($a['File'], $b['File']);
}

function _himuesgallery_rsort_thumbnails($a, $b) {
  return strcmp($b['File'], $a['File']);
}

/**
 * delete the thumbnails
 */
function _himuesgallery_delete_thumbnails($path) {
  $t = get_t();
  if (is_dir($path)) {
    $dirfiles = array_keys(file_scan_directory($path, "/^thumb\./", array('nomask' => '/(\.\.?|CVS|thumbs)$/', 'recurse' => FALSE, 'key' => 'filename')));

    foreach ($dirfiles as $file) {
      file_unmanaged_delete($path . "/" . $file);
    }
    drupal_set_message($t("himuesgallery: Thumbnails renewed."));
  }
  
  //if thumbnails renewed, all caches will be cleared to get rid of the problem hat thumbnails will not be shown
//  drupal_flush_all_caches();
  $core = array('cache', 'cache_filter', 'cache_bootstrap', 'cache_page');
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    cache_clear_all('*', $table, TRUE);
  }
}

//----------------------------------------------------------------------

/**
 * Get thumbnail-picture-size from CSS-File
 */
function _get_thumbnail_size($node) {
	$pathes = _get_pathes();

 //Default-Settings;
  $sizes = array('width' => 100, 'height' => 133);

  $found = FALSE;

  if ($node->css_path == HIMUESGALLERYINPICTUREDIR) {
  	//if we use himuesgallery.css in the picture dir
  	$css_file = $pathes['HIMUESGALLERY_REAL_PATH'] . $node->gallery_path . "/himuesgallery.css";
  } else {
  	$css_file = drupal_get_path('module', 'himuesgallery') . "/css/" . $node->css_path;
  }
  //read every line of css-file until find String ".himuesgallery_picture_image"
  
  $fp = fopen($css_file, 'r');

  if ($fp) {
	  while (!feof($fp)) {
	    $line = fgets($fp);
	    if ($found == FALSE && stristr($line, ".himuesgallery_picture_image") == TRUE) $found = TRUE ;
	
	    if ($found == TRUE) {
	      if (stristr($line, "}") == TRUE) break;
	      if (stristr((string)$line, "height") == TRUE) {
	        $line = preg_split( "/:/", $line);
	        $height = (int)$line[1];
	        if ($height > 0) $sizes['height'] = $height;
	      }
	
	      if (stristr((string)$line, "width") == TRUE) {
	        $line = preg_split( "/:/", $line);
	        $width = (int)$line[1];
	        if ($width > 0) $sizes['width'] = $width;
	      }
	    }
	  }

	  fclose($fp);
		} else {
  		drupal_set_message("In picture dir is no 'himuesgallery.css'! Please create one.");
  		error_log("$css_file does not exist");
  	}	
  return $sizes;
}

//----------------------------------------------------------------------

function template_preprocess_himuesgallery(&$variables, $hook) {
  $node=$variables['node'];
  $picturelist=$variables['picturelist'];
	$pathes = _get_pathes();

  foreach ($picturelist as $picture) {
    $file =  $pathes['HIMUESGALLERY_REAL_PATH'] . $node->gallery_path . "/" . $picture['File'];

    //If in directory "thumbs" no file with name "thumb.<picture>" exist -> create one.
    //This only happens on first show of the node after cration or if you delete the thumb.-file.
    //This should burst the performance
    if (!file_exists(dirname($file) . "/thumbs/thumb." . $picture['File'])) _himuesgallery_create_thumb($file, $node, $picture);
  }
}

//----------------------------------------------------------------------

/**
 * Create the thumbnails for a new or changed gallery
 */
function _himuesgallery_create_thumb($file, $node, $picture) {

  //If thumbnail-dir dosn't exist create it
	$dir=drupal_dirname($file) . "/thumbs";
	file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  //use the right function for file-/mime-type
  switch ($picture['type']) {
    case 1: //GIF
            $original_picture=imagecreatefromgif($file);
            break;
    case 2: //JPG
            $original_picture=imagecreatefromjpeg($file);
            break;
    case 3: //PNG
            $original_picture=imagecreatefrompng($file);
            break;
    default:
        return; //nichts tun, wenn es kein bekannter Bildtyp ist
  }

  if ($node->thumbnail_aspect_ratio == 0) {
      //wide-pictures will allways be shown with wide/height from node (node get it from from css-file)
      //height-pictures will be shown with height frome node (cdd-file) and wide will be calculated
      if ($picture['width'] > $picture['height']) {
	$thumbnail_width   = $node->thumbnail_picture_width;
	$thumbnail_height = $node->thumbnail_picture_height;
      } else {
        $picture_ratio=$picture['width']/$picture['height'];
        $thumbnail_height = $node->thumbnail_picture_height;
        $thumbnail_width  = $node->thumbnail_picture_height * $picture_ratio;
      }
  } else {
    $picture_ratio = $picture['width']/$picture['height'];

    if (($node->thumbnail_picture_width / $picture_ratio) > $node->thumbnail_picture_height) {
      $thumbnail_height = $node->thumbnail_picture_height;
      $thumbnail_width  = $node->thumbnail_picture_height * $picture_ratio;
    } else {
      $thumbnail_width = $node->thumbnail_picture_width;
      $thumbnail_height  = $node->thumbnail_picture_width / $picture_ratio;
    }
  }
  
  $bild=imagecreatetruecolor($thumbnail_width, $thumbnail_height);
  imagecopyresized($bild, $original_picture, 0, 0, 0, 0, $thumbnail_width, $thumbnail_height, $picture['width'], $picture['height']);

  //create the thumbnail-file in thumbnail-folder
  imagejpeg($bild, drupal_dirname($file) . "/thumbs/thumb." . basename($file), $node->thumbnail_picture_quality);
  imagedestroy($original_picture);
}
